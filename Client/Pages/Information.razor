@page "/info"
@using MySnowboardApp.Shared.Models
@inject HttpClient Http
@inject ISnackbar Snackbar

<PageTitle>Snowboarding Info</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Snowboard Information</MudText>
<MudText Class="mb-8">Showing the basic snowboarding information</MudText>


<MudTable Items="@boards" 
          Dense="@dense" 
          Hover="@hover" 
          ReadOnly="@ronly" 
          CanCancelEdit="@canCancelEdit" 
          Filter="new Func<BoardInfo,bool>(FilterFunc)"
          @bind-SelectedItem="selectedItem1" 
          SortLabel="Sort By" 
          CommitEditTooltip="Commit Edit"
          OnCommitEditClick="@(() => Snackbar.Add("Commit Edit Handler Invoked"))" 
          RowEditPreview="BackupItem" 
          RowEditCancel="ResetItemToOriginalValues"
          RowEditCommit="ItemHasBeenCommitted" 
          IsEditRowSwitchingBlocked="@blockSwitch">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Periodic Elements</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" 
                      Adornment="Adornment.Start"   AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <ColGroup>
        <col style="width:50px;" />
        <col style="width:80px;" />
        <col style="width:50%;" />
        <col />
        <col />
        <col style="width:50px;" />
    </ColGroup>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<BoardInfo, object>(x=>x.BoardName)">BoardName</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<BoardInfo, object>(x=>x.Brand)">Brand</MudTableSortLabel></MudTh>
        @*        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<BoardInfo, object>(x=>x.Name)">Name</MudTableSortLabel></MudTh>*@
        <MudTh><MudTableSortLabel SortBy="new Func<BoardInfo, object>(x=>x.RiderLevel)">RiderLevel</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<BoardInfo, object>(x=>x.BoardType)">BoardType</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="BoardName">@context.BoardName</MudTd>
        <MudTd DataLabel="Brand">@context.Brand</MudTd>
        <MudTd DataLabel="RiderLevel">@context.RiderLevel</MudTd>
        <MudTd DataLabel="BoardType">@context.BoardType</MudTd>
        <MudTd DataLabel="Flex">@context.Flex</MudTd>
        <MudTd DataLabel="Terrain">@context.Terrain</MudTd>
        <MudTd DataLabel="YearDesign">@context.YearDesign</MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd DataLabel="BoardName">@context.BoardName</MudTd>
        <MudTd DataLabel="Brand">
            <MudTextField @bind-Value="@context.Brand" Required />
        </MudTd>
        <MudTd DataLabel="RiderLevel">
            <MudTextField @bind-Value="@context.RiderLevel" Required />
        </MudTd>
        <MudTd DataLabel="BoardType">
            <MudTextField @bind-Value="@context.BoardType" Required />
        </MudTd>
        <MudTd DataLabel="Flex">
            <MudTextField @bind-Value="@context.Flex" Required />
        </MudTd>
        <MudTd DataLabel="Terrain">
            <MudTextField @bind-Value="@context.Terrain" Required />
        </MudTd>
        <MudTd DataLabel="YearDesign">
            <MudNumericField @bind-Value="@context.YearDesign" Required />
        </MudTd>
    </RowEditingTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

<MudSwitch @bind-Checked="@hover" Color="Color.Primary">Hover</MudSwitch>
<MudSwitch @bind-Checked="@dense" Color="Color.Secondary">Dense</MudSwitch>
<MudSwitch @bind-Checked="@ronly" Color="Color.Tertiary">Read Only</MudSwitch>
<MudSwitch @bind-Checked="@canCancelEdit" Color="Color.Info">Can Cancel Edit</MudSwitch>
<MudSwitch @bind-Checked="@blockSwitch" Color="Color.Success">Block Edit Row Switching</MudSwitch>
<MudText Inline="true">Selected1: @selectedItem1?.BoardName</MudText>

<MudExpansionPanels Style="flex: 1;">
    <MudExpansionPanel Text="Show inline-edit event log">
        @foreach (var message in editEvents)
        {
            <MudText>@message</MudText>
        }
        @if (editEvents.Count > 0)
        {
            <div class="d-flex">
                <MudSpacer />
                <MudButton Class="mt-3" ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="ClearEventLog">Clear event log</MudButton>
            </div>
        }
    </MudExpansionPanel>
</MudExpansionPanels>

@*@code {
    private List<string> editEvents = new();
    private bool dense = false;
    private bool hover = true;
    private bool ronly = false;
    private bool canCancelEdit = false;
    private bool blockSwitch = false;
    private string searchString = "";
    private BoardInfo selectedItem1 = null;
    private BoardInfo elementBeforeEdit;
    private HashSet<BoardInfo> selectedItems1 = new HashSet<BoardInfo>();

    private IEnumerable<BoardInfo> boards = new List<BoardInfo>();

    protected override async Task OnInitializedAsync()
    {
        boards = await Http.GetFromJsonAsync<List<BoardInfo>>("api/Board");
    }

    private void ClearEventLog()
    {
        editEvents.Clear();
    }

    private void AddEditionEvent(string message)
    {
        editEvents.Add(message);
        StateHasChanged();
    }

    private void BackupItem(object element)
    {
        elementBeforeEdit = new()
            {
                BoardName = ((BoardInfo)element).BoardName,
                Brand = ((BoardInfo)element).Brand,
                RiderLevel = ((BoardInfo)element).RiderLevel,
                BoardType = ((BoardInfo)element).BoardType,
                Flex = ((BoardInfo)element).Flex,
                Terrain = ((BoardInfo)element).Terrain,
                YearDesign = ((BoardInfo)element).YearDesign
            };
        AddEditionEvent($"RowEditPreview event: made a backup of Element {((BoardInfo)element).BoardName}");
    }

    private void ItemHasBeenCommitted(object element)
    {
        AddEditionEvent($"RowEditCommit event: Changes to Element {((BoardInfo)element).BoardName} committed");
    }

    private void ResetItemToOriginalValues(object element)
    {
        ((BoardInfo)element).BoardName = elementBeforeEdit.BoardName;
        ((BoardInfo)element).Brand = elementBeforeEdit.Brand;
        ((BoardInfo)element).RiderLevel = elementBeforeEdit.RiderLevel;
        ((BoardInfo)element).BoardType = elementBeforeEdit.BoardType;
        ((BoardInfo)element).Flex = elementBeforeEdit.Flex;
        ((BoardInfo)element).Terrain = elementBeforeEdit.Terrain;
        ((BoardInfo)element).YearDesign = elementBeforeEdit.YearDesign;
        AddEditionEvent($"RowEditCancel event: Editing of Element {((BoardInfo)element).BoardName} cancelled");
    }

    private bool FilterFunc(BoardInfo element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.BoardName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Brand.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        //if ($"{element.Number} {element.Position} {element.Molar}".Contains(searchString))
        //    return true;
        return false;
    }
}*@
